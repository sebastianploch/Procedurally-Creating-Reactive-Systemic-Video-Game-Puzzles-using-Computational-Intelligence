@startuml

abstract class PuzzleObject{
    +PuzzleObject(available_states)

    +int get_current_state()
    +Tuple get_position()
    +Dict get_available_states()
    +bool is_completed()
    +PuzzleObject get_depends_on()

    +abstract update(action)
    +abstract reset()

    -current_state : int
    -position : Tuple
    -available_states : Dict
    -completed : bool
    -depends_on : PuzzleObject
    -connects_to : PuzzleObject
}

class Button{
    +Button(position)
    +update(action)
    +reset()
}

class Button implements PuzzleObject

class Door{
    +Door(position, depends_on)
    +update(action)
    +reset()
}

class Door implements PuzzleObject

class GameState{
    +GameState(puzzles, terminal_puzzle)

    +void step(action)
    +void reset()

    +void update_selected_puzzle()
    +void update_goal_puzzle()
    +void add_puzzle(puzzle)
    +void set_starting_puzzle(puzzle)
    +PuzzleObject get_starting_puzzle()
    +void set_terminal_puzzle(puzzle)
    +PuzzleObject get_terminal_puzzle()

    +int get_map_size()
    +int get_map_width()
    +int get_map_height()
       +List get_puzzles()

    +List get_map()
    +List get_position_map()
    +List get_goal_map()
    +List get_map_state()
    -game_states : Dict
    -puzzles : List
    -starting_puzzle : PuzzleObject
    -terminal_puzzle : PuzzleObject
    -map_width : int
    -map_height : int
    -map : List
}

GameState *-- PuzzleObject
@enduml